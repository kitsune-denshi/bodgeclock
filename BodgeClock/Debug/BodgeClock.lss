
BodgeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011a  0080011a  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000238  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010d  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dd  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001eb  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	8e c1       	rjmp	.+796    	; 0x330 <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	48 c1       	rjmp	.+656    	; 0x2ae <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e6       	ldi	r30, 0x6A	; 106
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 31       	cpi	r26, 0x1A	; 26
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e1       	ldi	r26, 0x1A	; 26
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 32       	cpi	r26, 0x2A	; 42
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	7e c1       	rjmp	.+764    	; 0x366 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
volatile uint8_t rx_numbers[6];
volatile uint8_t in_sleep;

int main(void)
{
	segment_counter = 0;
  6c:	10 92 27 01 	sts	0x0127, r1
	in_counter = 0;
  70:	10 92 29 01 	sts	0x0129, r1
	in_sleep = 0;
  74:	10 92 26 01 	sts	0x0126, r1

	DDRB = 0x03;
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
  80:	8a b9       	out	0x0a, r24	; 10
	
	//timer 0: display refresh
	OCR0A = 20; 
  82:	84 e1       	ldi	r24, 0x14	; 20
  84:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = (1<<WGM01);
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
  8e:	85 bd       	out	0x25, r24	; 37
	
	//timer 2: RTC
	ASSR = (1<<AS2);
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	80 93 b6 00 	sts	0x00B6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e9       	ldi	r18, 0x9F	; 159
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
	_delay_ms(500);
	TIMSK2 = 0;
  a8:	e0 e7       	ldi	r30, 0x70	; 112
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	TCNT2 = 0x00;
  ae:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2A = 0x00;
  b2:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1<<CS22)|(1<<CS00);
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	80 93 b1 00 	sts	0x00B1, r24
	//while(ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
	TIFR2  = (1<<TOV2);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	87 bb       	out	0x17, r24	; 23
	TIMSK2  = (1<<TOIE2);
  c0:	80 83       	st	Z, r24
	
	
	
	
	//uart
	UCSR0A = (1<<U2X0);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
  d4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 12;
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	80 93 c4 00 	sts	0x00C4, r24
	
	PRR = (1<<PRTWI) | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
  de:	8d e8       	ldi	r24, 0x8D	; 141
  e0:	80 93 64 00 	sts	0x0064, r24
	
	sei();
  e4:	78 94       	sei
	
    while(1)
	{			
		if(out_numbers[5] == 10)
  e6:	af e1       	ldi	r26, 0x1F	; 31
  e8:	b1 e0       	ldi	r27, 0x01	; 1
		{
			out_numbers[5] = 0;
			out_numbers[4]++;
  ea:	8e e1       	ldi	r24, 0x1E	; 30
  ec:	91 e0       	ldi	r25, 0x01	; 1
				
			if(out_numbers[4] == 6)
			{
				out_numbers[4] = 0;
				out_numbers[3]++;
  ee:	6d e1       	ldi	r22, 0x1D	; 29
  f0:	71 e0       	ldi	r23, 0x01	; 1
					
				if(out_numbers[3] == 10)	
				{
					out_numbers[3] = 0;
					out_numbers[2]++;
  f2:	0f 2e       	mov	r0, r31
  f4:	fc e1       	ldi	r31, 0x1C	; 28
  f6:	ef 2e       	mov	r14, r31
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	ff 2e       	mov	r15, r31
  fc:	f0 2d       	mov	r31, r0
						
					if(out_numbers[2] == 6)
					{
						out_numbers[2] = 0;
						out_numbers[1]++;
  fe:	0f 2e       	mov	r0, r31
 100:	fb e1       	ldi	r31, 0x1B	; 27
 102:	cf 2e       	mov	r12, r31
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	df 2e       	mov	r13, r31
 108:	f0 2d       	mov	r31, r0
							out_numbers[1] = 0;
							out_numbers[0]++;
						}
								
						//reset hours at 24
						if((out_numbers[0]) == 2 && (out_numbers[1] == 4))
 10a:	0f 2e       	mov	r0, r31
 10c:	fa e1       	ldi	r31, 0x1A	; 26
 10e:	af 2e       	mov	r10, r31
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	bf 2e       	mov	r11, r31
 114:	f0 2d       	mov	r31, r0
			}
		}
	
		
		
		if(UCSR0A & (1<<RXC0))
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
		{
			temp = UDR0;
 11a:	26 ec       	ldi	r18, 0xC6	; 198
 11c:	30 e0       	ldi	r19, 0x00	; 0
			UDR0 = temp;
			
			if(in_counter == 6 && temp == 'x')
			{
				cli();
				out_numbers[5] = rx_numbers[5];
 11e:	0f 2e       	mov	r0, r31
 120:	f5 e2       	ldi	r31, 0x25	; 37
 122:	8f 2e       	mov	r8, r31
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	9f 2e       	mov	r9, r31
 128:	f0 2d       	mov	r31, r0
				out_numbers[4] = rx_numbers[4];
 12a:	0f 2e       	mov	r0, r31
 12c:	f4 e2       	ldi	r31, 0x24	; 36
 12e:	2f 2e       	mov	r2, r31
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	3f 2e       	mov	r3, r31
 134:	f0 2d       	mov	r31, r0
		else
		{
			if(in_sleep)
			{
				PRR &= ~(1<<PRTIM0);
				TIMSK0 = (1<<OCIE0A);
 136:	4e e6       	ldi	r20, 0x6E	; 110
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	68 94       	set
 13c:	55 24       	eor	r5, r5
 13e:	51 f8       	bld	r5, 1
			sleep_enable();
			
		
			if(!in_sleep)
			{	
				in_sleep = 1;
 140:	66 24       	eor	r6, r6
 142:	63 94       	inc	r6
				//turn off display timer
				PRR |= (1<<PRTIM0);
				TIMSK0 = 0;
				
				//turn off all digits and segments
				PORTC = 0xFF;
 144:	77 24       	eor	r7, r7
 146:	7a 94       	dec	r7
	
	sei();
	
    while(1)
	{			
		if(out_numbers[5] == 10)
 148:	1c 91       	ld	r17, X
 14a:	1a 30       	cpi	r17, 0x0A	; 10
 14c:	89 f5       	brne	.+98     	; 0x1b0 <main+0x144>
		{
			out_numbers[5] = 0;
 14e:	1c 92       	st	X, r1
			out_numbers[4]++;
 150:	ec 01       	movw	r28, r24
 152:	18 81       	ld	r17, Y
 154:	1f 5f       	subi	r17, 0xFF	; 255
 156:	18 83       	st	Y, r17
				
			if(out_numbers[4] == 6)
 158:	18 81       	ld	r17, Y
 15a:	16 30       	cpi	r17, 0x06	; 6
 15c:	49 f5       	brne	.+82     	; 0x1b0 <main+0x144>
			{
				out_numbers[4] = 0;
 15e:	18 82       	st	Y, r1
				out_numbers[3]++;
 160:	eb 01       	movw	r28, r22
 162:	18 81       	ld	r17, Y
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	18 83       	st	Y, r17
					
				if(out_numbers[3] == 10)	
 168:	18 81       	ld	r17, Y
 16a:	1a 30       	cpi	r17, 0x0A	; 10
 16c:	09 f5       	brne	.+66     	; 0x1b0 <main+0x144>
				{
					out_numbers[3] = 0;
 16e:	18 82       	st	Y, r1
					out_numbers[2]++;
 170:	e7 01       	movw	r28, r14
 172:	18 81       	ld	r17, Y
 174:	1f 5f       	subi	r17, 0xFF	; 255
 176:	18 83       	st	Y, r17
						
					if(out_numbers[2] == 6)
 178:	18 81       	ld	r17, Y
 17a:	16 30       	cpi	r17, 0x06	; 6
 17c:	c9 f4       	brne	.+50     	; 0x1b0 <main+0x144>
					{
						out_numbers[2] = 0;
 17e:	18 82       	st	Y, r1
						out_numbers[1]++;
 180:	e6 01       	movw	r28, r12
 182:	18 81       	ld	r17, Y
 184:	1f 5f       	subi	r17, 0xFF	; 255
 186:	18 83       	st	Y, r17
							
						//increment 10-hours and 09++ and 19++
						if(out_numbers[1] == 10)
 188:	18 81       	ld	r17, Y
 18a:	1a 30       	cpi	r17, 0x0A	; 10
 18c:	29 f4       	brne	.+10     	; 0x198 <main+0x12c>
						{
							out_numbers[1] = 0;
 18e:	18 82       	st	Y, r1
							out_numbers[0]++;
 190:	e5 01       	movw	r28, r10
 192:	18 81       	ld	r17, Y
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	18 83       	st	Y, r17
						}
								
						//reset hours at 24
						if((out_numbers[0]) == 2 && (out_numbers[1] == 4))
 198:	e5 01       	movw	r28, r10
 19a:	18 81       	ld	r17, Y
 19c:	12 30       	cpi	r17, 0x02	; 2
 19e:	41 f4       	brne	.+16     	; 0x1b0 <main+0x144>
 1a0:	e6 01       	movw	r28, r12
 1a2:	18 81       	ld	r17, Y
 1a4:	14 30       	cpi	r17, 0x04	; 4
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <main+0x144>
						{
							out_numbers[0] = 0;
 1a8:	e5 01       	movw	r28, r10
 1aa:	18 82       	st	Y, r1
							out_numbers[1] = 0;
 1ac:	e6 01       	movw	r28, r12
 1ae:	18 82       	st	Y, r1
			}
		}
	
		
		
		if(UCSR0A & (1<<RXC0))
 1b0:	10 81       	ld	r17, Z
 1b2:	11 23       	and	r17, r17
 1b4:	0c f0       	brlt	.+2      	; 0x1b8 <main+0x14c>
 1b6:	4f c0       	rjmp	.+158    	; 0x256 <main+0x1ea>
		{
			temp = UDR0;
 1b8:	e9 01       	movw	r28, r18
 1ba:	18 81       	ld	r17, Y
 1bc:	10 93 28 01 	sts	0x0128, r17
			
			while (!(UCSR0A & (1<<UDRE0)));
 1c0:	10 81       	ld	r17, Z
 1c2:	15 ff       	sbrs	r17, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <main+0x154>
			UDR0 = temp;
 1c6:	10 91 28 01 	lds	r17, 0x0128
 1ca:	e9 01       	movw	r28, r18
 1cc:	18 83       	st	Y, r17
			
			if(in_counter == 6 && temp == 'x')
 1ce:	10 91 29 01 	lds	r17, 0x0129
 1d2:	16 30       	cpi	r17, 0x06	; 6
 1d4:	09 f5       	brne	.+66     	; 0x218 <main+0x1ac>
 1d6:	10 91 28 01 	lds	r17, 0x0128
 1da:	18 37       	cpi	r17, 0x78	; 120
 1dc:	e9 f4       	brne	.+58     	; 0x218 <main+0x1ac>
			{
				cli();
 1de:	f8 94       	cli
				out_numbers[5] = rx_numbers[5];
 1e0:	e4 01       	movw	r28, r8
 1e2:	18 81       	ld	r17, Y
 1e4:	1c 93       	st	X, r17
				out_numbers[4] = rx_numbers[4];
 1e6:	e1 01       	movw	r28, r2
 1e8:	18 81       	ld	r17, Y
 1ea:	ec 01       	movw	r28, r24
 1ec:	18 83       	st	Y, r17
				out_numbers[3] = rx_numbers[3];
 1ee:	c3 e2       	ldi	r28, 0x23	; 35
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	18 81       	ld	r17, Y
 1f4:	eb 01       	movw	r28, r22
 1f6:	18 83       	st	Y, r17
				out_numbers[2] = rx_numbers[2];
 1f8:	c2 e2       	ldi	r28, 0x22	; 34
 1fa:	d1 e0       	ldi	r29, 0x01	; 1
 1fc:	18 81       	ld	r17, Y
 1fe:	e7 01       	movw	r28, r14
 200:	18 83       	st	Y, r17
				out_numbers[1] = rx_numbers[1];
 202:	c1 e2       	ldi	r28, 0x21	; 33
 204:	d1 e0       	ldi	r29, 0x01	; 1
 206:	18 81       	ld	r17, Y
 208:	e6 01       	movw	r28, r12
 20a:	18 83       	st	Y, r17
				out_numbers[0] = rx_numbers[0];
 20c:	c0 e2       	ldi	r28, 0x20	; 32
 20e:	d1 e0       	ldi	r29, 0x01	; 1
 210:	18 81       	ld	r17, Y
 212:	e5 01       	movw	r28, r10
 214:	18 83       	st	Y, r17
				sei();
 216:	78 94       	sei
			}
			
			if(temp == 'b')
 218:	10 91 28 01 	lds	r17, 0x0128
 21c:	12 36       	cpi	r17, 0x62	; 98
 21e:	19 f4       	brne	.+6      	; 0x226 <main+0x1ba>
			{
				in_counter = 0;
 220:	10 92 29 01 	sts	0x0129, r1
 224:	18 c0       	rjmp	.+48     	; 0x256 <main+0x1ea>
			}
			else
			{
				if(temp >= '0' && temp <= '9')
 226:	10 91 28 01 	lds	r17, 0x0128
 22a:	10 33       	cpi	r17, 0x30	; 48
 22c:	78 f0       	brcs	.+30     	; 0x24c <main+0x1e0>
 22e:	10 91 28 01 	lds	r17, 0x0128
 232:	1a 33       	cpi	r17, 0x3A	; 58
 234:	58 f4       	brcc	.+22     	; 0x24c <main+0x1e0>
				{
					rx_numbers[in_counter] = temp - '0';	
 236:	00 91 29 01 	lds	r16, 0x0129
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	40 90 28 01 	lds	r4, 0x0128
 240:	d0 ed       	ldi	r29, 0xD0	; 208
 242:	4d 0e       	add	r4, r29
 244:	00 5e       	subi	r16, 0xE0	; 224
 246:	1e 4f       	sbci	r17, 0xFE	; 254
 248:	e8 01       	movw	r28, r16
 24a:	48 82       	st	Y, r4
				}
				
				in_counter++;
 24c:	10 91 29 01 	lds	r17, 0x0129
 250:	1f 5f       	subi	r17, 0xFF	; 255
 252:	10 93 29 01 	sts	0x0129, r17
			}
		}
			
		
		if(!(PINB & 0x04))
 256:	1a 99       	sbic	0x03, 2	; 3
 258:	1c c0       	rjmp	.+56     	; 0x292 <main+0x226>
		{
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 25a:	13 b7       	in	r17, 0x33	; 51
 25c:	11 7f       	andi	r17, 0xF1	; 241
 25e:	16 60       	ori	r17, 0x06	; 6
 260:	13 bf       	out	0x33, r17	; 51
			sleep_enable();
 262:	13 b7       	in	r17, 0x33	; 51
 264:	11 60       	ori	r17, 0x01	; 1
 266:	13 bf       	out	0x33, r17	; 51
			
		
			if(!in_sleep)
 268:	10 91 26 01 	lds	r17, 0x0126
 26c:	11 11       	cpse	r17, r1
 26e:	0c c0       	rjmp	.+24     	; 0x288 <main+0x21c>
			{	
				in_sleep = 1;
 270:	60 92 26 01 	sts	0x0126, r6
				
				//turn off display timer
				PRR |= (1<<PRTIM0);
 274:	c4 e6       	ldi	r28, 0x64	; 100
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	18 81       	ld	r17, Y
 27a:	10 62       	ori	r17, 0x20	; 32
 27c:	18 83       	st	Y, r17
				TIMSK0 = 0;
 27e:	ea 01       	movw	r28, r20
 280:	18 82       	st	Y, r1
				
				//turn off all digits and segments
				PORTC = 0xFF;
 282:	78 b8       	out	0x08, r7	; 8
				PORTD = 0x00;
 284:	1b b8       	out	0x0b, r1	; 11
				PORTB &= 0xFE;
 286:	28 98       	cbi	0x05, 0	; 5
			}
			
			sleep_cpu();
 288:	88 95       	sleep
			sleep_disable();
 28a:	13 b7       	in	r17, 0x33	; 51
 28c:	1e 7f       	andi	r17, 0xFE	; 254
 28e:	13 bf       	out	0x33, r17	; 51
 290:	5b cf       	rjmp	.-330    	; 0x148 <main+0xdc>
			
			
		}
		else
		{
			if(in_sleep)
 292:	10 91 26 01 	lds	r17, 0x0126
 296:	11 23       	and	r17, r17
 298:	39 f0       	breq	.+14     	; 0x2a8 <main+0x23c>
			{
				PRR &= ~(1<<PRTIM0);
 29a:	c4 e6       	ldi	r28, 0x64	; 100
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	18 81       	ld	r17, Y
 2a0:	1f 7d       	andi	r17, 0xDF	; 223
 2a2:	18 83       	st	Y, r17
				TIMSK0 = (1<<OCIE0A);
 2a4:	ea 01       	movw	r28, r20
 2a6:	58 82       	st	Y, r5
			}
			
			in_sleep = 0;
 2a8:	10 92 26 01 	sts	0x0126, r1
 2ac:	4d cf       	rjmp	.-358    	; 0x148 <main+0xdc>

000002ae <__vector_14>:
	}

}

ISR(TIMER0_COMPA_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	
	
	//move forward one segment
	segment_counter++;
 2be:	80 91 27 01 	lds	r24, 0x0127
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 27 01 	sts	0x0127, r24
	if(segment_counter == 6)
 2c8:	80 91 27 01 	lds	r24, 0x0127
 2cc:	86 30       	cpi	r24, 0x06	; 6
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <__vector_14+0x26>
		segment_counter = 0;
 2d0:	10 92 27 01 	sts	0x0127, r1
		
	
	//turn off all digits and segments
	PORTC = 0xFF;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00;
 2d8:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0xFE;
 2da:	28 98       	cbi	0x05, 0	; 5
	
	//output segments for current digit
	PORTD = portd_segments[out_numbers[segment_counter]];
 2dc:	e0 91 27 01 	lds	r30, 0x0127
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e6 5e       	subi	r30, 0xE6	; 230
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	e0 81       	ld	r30, Z
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e0 5f       	subi	r30, 0xF0	; 240
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 81       	ld	r24, Z
 2f0:	8b b9       	out	0x0b, r24	; 11
	if(portb_segments[out_numbers[segment_counter]])
 2f2:	e0 91 27 01 	lds	r30, 0x0127
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e6 5e       	subi	r30, 0xE6	; 230
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	e0 81       	ld	r30, Z
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ea 5f       	subi	r30, 0xFA	; 250
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <__stack+0xf>
		PORTB |= 0x01;
 30a:	28 9a       	sbi	0x05, 0	; 5
 30c:	01 c0       	rjmp	.+2      	; 0x310 <__stack+0x11>
	else
		PORTB &= 0xFE;
 30e:	28 98       	cbi	0x05, 0	; 5
		
	//enable current digit
	PORTC = ~portc_digits[segment_counter];
 310:	e0 91 27 01 	lds	r30, 0x0127
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	e0 50       	subi	r30, 0x00	; 0
 318:	ff 4f       	sbci	r31, 0xFF	; 255
 31a:	80 81       	ld	r24, Z
 31c:	80 95       	com	r24
 31e:	88 b9       	out	0x08, r24	; 8
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	PORTB ^= 0x02;
 342:	95 b1       	in	r25, 0x05	; 5
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	89 27       	eor	r24, r25
 348:	85 b9       	out	0x05, r24	; 5
	out_numbers[5]++;
 34a:	ef e1       	ldi	r30, 0x1F	; 31
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	80 81       	ld	r24, Z
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 83       	st	Z, r24
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
