
BodgeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080011a  0080011a  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000025a  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010d  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d0  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	8a c1       	rjmp	.+788    	; 0x328 <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e6       	ldi	r30, 0x62	; 98
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 31       	cpi	r26, 0x1A	; 26
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e1       	ldi	r26, 0x1A	; 26
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 32       	cpi	r26, 0x2C	; 44
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	7a c1       	rjmp	.+756    	; 0x35e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
volatile uint8_t rx_numbers[6];
volatile uint8_t in_sleep;

int main(void)
{
	tick_counter = 0;
  6c:	10 92 2b 01 	sts	0x012B, r1
  70:	10 92 2a 01 	sts	0x012A, r1
	segment_counter = 0;
  74:	10 92 27 01 	sts	0x0127, r1
	in_counter = 0;
  78:	10 92 29 01 	sts	0x0129, r1
	in_sleep = 0;
  7c:	10 92 26 01 	sts	0x0126, r1

	DDRB = 0x03;
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
  88:	8a b9       	out	0x0a, r24	; 10
	
	//timer 0: display refresh
	OCR0A = 20; 
  8a:	84 e1       	ldi	r24, 0x14	; 20
  8c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = (1<<WGM01);
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
  96:	85 bd       	out	0x25, r24	; 37
	
	//timer 2: RTC
	ASSR = (1<<AS2);
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	80 93 b6 00 	sts	0x00B6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f e9       	ldi	r18, 0x9F	; 159
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
	_delay_ms(500);
	TIMSK2 = 0;
  b0:	e0 e7       	ldi	r30, 0x70	; 112
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
	TCNT2 = 0x00;
  b6:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2A = 0x00;
  ba:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1<<CS22)|(1<<CS00);
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	80 93 b1 00 	sts	0x00B1, r24
	//while(ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
	TIFR2  = (1<<TOV2);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	87 bb       	out	0x17, r24	; 23
	TIMSK2  = (1<<TOIE2);
  c8:	80 83       	st	Z, r24
	
	
	
	
	//uart
	UCSR0A = (1<<U2X0);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
  dc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 12;
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	80 93 c4 00 	sts	0x00C4, r24
	
	PRR = (1<<PRTWI) | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
  e6:	8d e8       	ldi	r24, 0x8D	; 141
  e8:	80 93 64 00 	sts	0x0064, r24
	
	sei();
  ec:	78 94       	sei
	
    while(1)
	{			
		if(out_numbers[5] == 10)
  ee:	af e1       	ldi	r26, 0x1F	; 31
  f0:	b1 e0       	ldi	r27, 0x01	; 1
		{
			out_numbers[5] = 0;
			out_numbers[4]++;
  f2:	8e e1       	ldi	r24, 0x1E	; 30
  f4:	91 e0       	ldi	r25, 0x01	; 1
				
			if(out_numbers[4] == 6)
			{
				out_numbers[4] = 0;
				out_numbers[3]++;
  f6:	0d e1       	ldi	r16, 0x1D	; 29
  f8:	11 e0       	ldi	r17, 0x01	; 1
					
				if(out_numbers[3] == 10)	
				{
					out_numbers[3] = 0;
					out_numbers[2]++;
  fa:	0f 2e       	mov	r0, r31
  fc:	fc e1       	ldi	r31, 0x1C	; 28
  fe:	ef 2e       	mov	r14, r31
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	ff 2e       	mov	r15, r31
 104:	f0 2d       	mov	r31, r0
						
					if(out_numbers[2] == 6)
					{
						out_numbers[2] = 0;
						out_numbers[1]++;
 106:	0f 2e       	mov	r0, r31
 108:	fb e1       	ldi	r31, 0x1B	; 27
 10a:	cf 2e       	mov	r12, r31
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	df 2e       	mov	r13, r31
 110:	f0 2d       	mov	r31, r0
							out_numbers[1] = 0;
							out_numbers[0]++;
						}
								
						//reset hours at 24
						if((out_numbers[0]) == 2 && (out_numbers[1] == 4))
 112:	0f 2e       	mov	r0, r31
 114:	fa e1       	ldi	r31, 0x1A	; 26
 116:	af 2e       	mov	r10, r31
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	bf 2e       	mov	r11, r31
 11c:	f0 2d       	mov	r31, r0
			}
		}
	
		
		
		if(UCSR0A & (1<<RXC0))
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
		{
			temp = UDR0;
 122:	26 ec       	ldi	r18, 0xC6	; 198
 124:	30 e0       	ldi	r19, 0x00	; 0
			UDR0 = temp;
			
			if(in_counter == 6)
			{
				cli();
				out_numbers[5] = rx_numbers[5];
 126:	0f 2e       	mov	r0, r31
 128:	f5 e2       	ldi	r31, 0x25	; 37
 12a:	8f 2e       	mov	r8, r31
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	9f 2e       	mov	r9, r31
 130:	f0 2d       	mov	r31, r0
				out_numbers[4] = rx_numbers[4];
 132:	0f 2e       	mov	r0, r31
 134:	f4 e2       	ldi	r31, 0x24	; 36
 136:	2f 2e       	mov	r2, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	3f 2e       	mov	r3, r31
 13c:	f0 2d       	mov	r31, r0
		else
		{
			if(in_sleep)
			{
				PRR &= ~(1<<PRTIM0);
				TIMSK0 = (1<<OCIE0A);
 13e:	4e e6       	ldi	r20, 0x6E	; 110
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	68 94       	set
 144:	44 24       	eor	r4, r4
 146:	41 f8       	bld	r4, 1
			sleep_enable();
			
		
			if(!in_sleep)
			{	
				in_sleep = 1;
 148:	55 24       	eor	r5, r5
 14a:	53 94       	inc	r5
				//turn off display timer
				PRR |= (1<<PRTIM0);
				TIMSK0 = 0;
				
				//turn off all digits and segments
				PORTC = 0xFF;
 14c:	66 24       	eor	r6, r6
 14e:	6a 94       	dec	r6
	
	sei();
	
    while(1)
	{			
		if(out_numbers[5] == 10)
 150:	6c 91       	ld	r22, X
 152:	6a 30       	cpi	r22, 0x0A	; 10
 154:	89 f5       	brne	.+98     	; 0x1b8 <main+0x14c>
		{
			out_numbers[5] = 0;
 156:	1c 92       	st	X, r1
			out_numbers[4]++;
 158:	ec 01       	movw	r28, r24
 15a:	68 81       	ld	r22, Y
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	68 83       	st	Y, r22
				
			if(out_numbers[4] == 6)
 160:	68 81       	ld	r22, Y
 162:	66 30       	cpi	r22, 0x06	; 6
 164:	49 f5       	brne	.+82     	; 0x1b8 <main+0x14c>
			{
				out_numbers[4] = 0;
 166:	18 82       	st	Y, r1
				out_numbers[3]++;
 168:	e8 01       	movw	r28, r16
 16a:	68 81       	ld	r22, Y
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	68 83       	st	Y, r22
					
				if(out_numbers[3] == 10)	
 170:	68 81       	ld	r22, Y
 172:	6a 30       	cpi	r22, 0x0A	; 10
 174:	09 f5       	brne	.+66     	; 0x1b8 <main+0x14c>
				{
					out_numbers[3] = 0;
 176:	18 82       	st	Y, r1
					out_numbers[2]++;
 178:	e7 01       	movw	r28, r14
 17a:	68 81       	ld	r22, Y
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	68 83       	st	Y, r22
						
					if(out_numbers[2] == 6)
 180:	68 81       	ld	r22, Y
 182:	66 30       	cpi	r22, 0x06	; 6
 184:	c9 f4       	brne	.+50     	; 0x1b8 <main+0x14c>
					{
						out_numbers[2] = 0;
 186:	18 82       	st	Y, r1
						out_numbers[1]++;
 188:	e6 01       	movw	r28, r12
 18a:	68 81       	ld	r22, Y
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	68 83       	st	Y, r22
							
						//increment 10-hours and 09++ and 19++
						if(out_numbers[1] == 10)
 190:	68 81       	ld	r22, Y
 192:	6a 30       	cpi	r22, 0x0A	; 10
 194:	29 f4       	brne	.+10     	; 0x1a0 <main+0x134>
						{
							out_numbers[1] = 0;
 196:	18 82       	st	Y, r1
							out_numbers[0]++;
 198:	e5 01       	movw	r28, r10
 19a:	68 81       	ld	r22, Y
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	68 83       	st	Y, r22
						}
								
						//reset hours at 24
						if((out_numbers[0]) == 2 && (out_numbers[1] == 4))
 1a0:	e5 01       	movw	r28, r10
 1a2:	68 81       	ld	r22, Y
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <main+0x14c>
 1a8:	e6 01       	movw	r28, r12
 1aa:	68 81       	ld	r22, Y
 1ac:	64 30       	cpi	r22, 0x04	; 4
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <main+0x14c>
						{
							out_numbers[0] = 0;
 1b0:	e5 01       	movw	r28, r10
 1b2:	18 82       	st	Y, r1
							out_numbers[1] = 0;
 1b4:	e6 01       	movw	r28, r12
 1b6:	18 82       	st	Y, r1
			}
		}
	
		
		
		if(UCSR0A & (1<<RXC0))
 1b8:	60 81       	ld	r22, Z
 1ba:	66 23       	and	r22, r22
 1bc:	0c f0       	brlt	.+2      	; 0x1c0 <main+0x154>
 1be:	47 c0       	rjmp	.+142    	; 0x24e <main+0x1e2>
		{
			temp = UDR0;
 1c0:	e9 01       	movw	r28, r18
 1c2:	68 81       	ld	r22, Y
 1c4:	60 93 28 01 	sts	0x0128, r22
			
			while (!(UCSR0A & (1<<UDRE0)));
 1c8:	60 81       	ld	r22, Z
 1ca:	65 ff       	sbrs	r22, 5
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <main+0x15c>
			UDR0 = temp;
 1ce:	60 91 28 01 	lds	r22, 0x0128
 1d2:	e9 01       	movw	r28, r18
 1d4:	68 83       	st	Y, r22
			
			if(in_counter == 6)
 1d6:	60 91 29 01 	lds	r22, 0x0129
 1da:	66 30       	cpi	r22, 0x06	; 6
 1dc:	09 f5       	brne	.+66     	; 0x220 <main+0x1b4>
			{
				cli();
 1de:	f8 94       	cli
				out_numbers[5] = rx_numbers[5];
 1e0:	e4 01       	movw	r28, r8
 1e2:	68 81       	ld	r22, Y
 1e4:	6c 93       	st	X, r22
				out_numbers[4] = rx_numbers[4];
 1e6:	e1 01       	movw	r28, r2
 1e8:	68 81       	ld	r22, Y
 1ea:	ec 01       	movw	r28, r24
 1ec:	68 83       	st	Y, r22
				out_numbers[3] = rx_numbers[3];
 1ee:	c3 e2       	ldi	r28, 0x23	; 35
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	68 81       	ld	r22, Y
 1f4:	e8 01       	movw	r28, r16
 1f6:	68 83       	st	Y, r22
				out_numbers[2] = rx_numbers[2];
 1f8:	c2 e2       	ldi	r28, 0x22	; 34
 1fa:	d1 e0       	ldi	r29, 0x01	; 1
 1fc:	68 81       	ld	r22, Y
 1fe:	e7 01       	movw	r28, r14
 200:	68 83       	st	Y, r22
				out_numbers[1] = rx_numbers[1];
 202:	c1 e2       	ldi	r28, 0x21	; 33
 204:	d1 e0       	ldi	r29, 0x01	; 1
 206:	68 81       	ld	r22, Y
 208:	e6 01       	movw	r28, r12
 20a:	68 83       	st	Y, r22
				out_numbers[0] = rx_numbers[0];
 20c:	c0 e2       	ldi	r28, 0x20	; 32
 20e:	d1 e0       	ldi	r29, 0x01	; 1
 210:	68 81       	ld	r22, Y
 212:	e5 01       	movw	r28, r10
 214:	68 83       	st	Y, r22
				tick_counter = 0;
 216:	10 92 2b 01 	sts	0x012B, r1
 21a:	10 92 2a 01 	sts	0x012A, r1
				sei();
 21e:	78 94       	sei
			}
			
			if(temp == 'b')
 220:	60 91 28 01 	lds	r22, 0x0128
 224:	62 36       	cpi	r22, 0x62	; 98
 226:	19 f4       	brne	.+6      	; 0x22e <main+0x1c2>
			{
				in_counter = 0;
 228:	10 92 29 01 	sts	0x0129, r1
 22c:	10 c0       	rjmp	.+32     	; 0x24e <main+0x1e2>
			}
			else
			{
				rx_numbers[in_counter] = temp - '0';
 22e:	60 91 29 01 	lds	r22, 0x0129
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	70 90 28 01 	lds	r7, 0x0128
 238:	d0 ed       	ldi	r29, 0xD0	; 208
 23a:	7d 0e       	add	r7, r29
 23c:	60 5e       	subi	r22, 0xE0	; 224
 23e:	7e 4f       	sbci	r23, 0xFE	; 254
 240:	eb 01       	movw	r28, r22
 242:	78 82       	st	Y, r7
				in_counter++;
 244:	60 91 29 01 	lds	r22, 0x0129
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	60 93 29 01 	sts	0x0129, r22
			}
		}
			
		
		if(!(PINB & 0x04))
 24e:	1a 99       	sbic	0x03, 2	; 3
 250:	1c c0       	rjmp	.+56     	; 0x28a <main+0x21e>
		{
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 252:	63 b7       	in	r22, 0x33	; 51
 254:	61 7f       	andi	r22, 0xF1	; 241
 256:	66 60       	ori	r22, 0x06	; 6
 258:	63 bf       	out	0x33, r22	; 51
			sleep_enable();
 25a:	63 b7       	in	r22, 0x33	; 51
 25c:	61 60       	ori	r22, 0x01	; 1
 25e:	63 bf       	out	0x33, r22	; 51
			
		
			if(!in_sleep)
 260:	60 91 26 01 	lds	r22, 0x0126
 264:	61 11       	cpse	r22, r1
 266:	0c c0       	rjmp	.+24     	; 0x280 <main+0x214>
			{	
				in_sleep = 1;
 268:	50 92 26 01 	sts	0x0126, r5
				
				//turn off display timer
				PRR |= (1<<PRTIM0);
 26c:	c4 e6       	ldi	r28, 0x64	; 100
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	68 81       	ld	r22, Y
 272:	60 62       	ori	r22, 0x20	; 32
 274:	68 83       	st	Y, r22
				TIMSK0 = 0;
 276:	ea 01       	movw	r28, r20
 278:	18 82       	st	Y, r1
				
				//turn off all digits and segments
				PORTC = 0xFF;
 27a:	68 b8       	out	0x08, r6	; 8
				PORTD = 0x00;
 27c:	1b b8       	out	0x0b, r1	; 11
				PORTB &= 0xFE;
 27e:	28 98       	cbi	0x05, 0	; 5
			}
			
			sleep_cpu();
 280:	88 95       	sleep
			sleep_disable();
 282:	63 b7       	in	r22, 0x33	; 51
 284:	6e 7f       	andi	r22, 0xFE	; 254
 286:	63 bf       	out	0x33, r22	; 51
 288:	63 cf       	rjmp	.-314    	; 0x150 <main+0xe4>
			
			
		}
		else
		{
			if(in_sleep)
 28a:	60 91 26 01 	lds	r22, 0x0126
 28e:	66 23       	and	r22, r22
 290:	39 f0       	breq	.+14     	; 0x2a0 <main+0x234>
			{
				PRR &= ~(1<<PRTIM0);
 292:	c4 e6       	ldi	r28, 0x64	; 100
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	68 81       	ld	r22, Y
 298:	6f 7d       	andi	r22, 0xDF	; 223
 29a:	68 83       	st	Y, r22
				TIMSK0 = (1<<OCIE0A);
 29c:	ea 01       	movw	r28, r20
 29e:	48 82       	st	Y, r4
			}
			
			in_sleep = 0;
 2a0:	10 92 26 01 	sts	0x0126, r1
 2a4:	55 cf       	rjmp	.-342    	; 0x150 <main+0xe4>

000002a6 <__vector_14>:
	}

}

ISR(TIMER0_COMPA_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 93       	push	r24
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	
	
	//move forward one segment
	segment_counter++;
 2b6:	80 91 27 01 	lds	r24, 0x0127
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 27 01 	sts	0x0127, r24
	if(segment_counter == 6)
 2c0:	80 91 27 01 	lds	r24, 0x0127
 2c4:	86 30       	cpi	r24, 0x06	; 6
 2c6:	11 f4       	brne	.+4      	; 0x2cc <__vector_14+0x26>
		segment_counter = 0;
 2c8:	10 92 27 01 	sts	0x0127, r1
		
	
	//turn off all digits and segments
	PORTC = 0xFF;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00;
 2d0:	1b b8       	out	0x0b, r1	; 11
	PORTB &= 0xFE;
 2d2:	28 98       	cbi	0x05, 0	; 5
	
	//output segments for current digit
	PORTD = portd_segments[out_numbers[segment_counter]];
 2d4:	e0 91 27 01 	lds	r30, 0x0127
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e6 5e       	subi	r30, 0xE6	; 230
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	e0 81       	ld	r30, Z
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e0 5f       	subi	r30, 0xF0	; 240
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 81       	ld	r24, Z
 2e8:	8b b9       	out	0x0b, r24	; 11
	if(portb_segments[out_numbers[segment_counter]])
 2ea:	e0 91 27 01 	lds	r30, 0x0127
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e6 5e       	subi	r30, 0xE6	; 230
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	e0 81       	ld	r30, Z
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ea 5f       	subi	r30, 0xFA	; 250
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	11 f0       	breq	.+4      	; 0x306 <__stack+0x7>
		PORTB |= 0x01;
 302:	28 9a       	sbi	0x05, 0	; 5
 304:	01 c0       	rjmp	.+2      	; 0x308 <__stack+0x9>
	else
		PORTB &= 0xFE;
 306:	28 98       	cbi	0x05, 0	; 5
		
	//enable current digit
	PORTC = ~portc_digits[segment_counter];
 308:	e0 91 27 01 	lds	r30, 0x0127
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e0 50       	subi	r30, 0x00	; 0
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	80 81       	ld	r24, Z
 314:	80 95       	com	r24
 316:	88 b9       	out	0x08, r24	; 8
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	PORTB ^= 0x02;
 33a:	95 b1       	in	r25, 0x05	; 5
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	89 27       	eor	r24, r25
 340:	85 b9       	out	0x05, r24	; 5
	out_numbers[5]++;
 342:	ef e1       	ldi	r30, 0x1F	; 31
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	80 81       	ld	r24, Z
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 83       	st	Z, r24
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
